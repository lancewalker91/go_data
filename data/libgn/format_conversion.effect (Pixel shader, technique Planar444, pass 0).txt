uniform float input_height;
uniform float width;
uniform float v_plane_offset;
uniform float u_plane_offset;
uniform float width_i;
uniform float height_i;
uniform Texture2D image;


SamplerState def_sampler {
	Filter = Linear;

	AddressU = Clamp;

	AddressV = Clamp;

};




struct VertInOut {
	float4 pos : SV_Position;
	float2 uv : TEXCOORD0;
};

float4 PSPlanar444(VertInOut vert_in)
{
	float v_mul = floor(vert_in.uv.y * input_height);

	float byte_offset = floor((v_mul + vert_in.uv.x) * width) * 4.0;
	byte_offset +=  0.2;

	float new_byte_offset = byte_offset;

	if (byte_offset >= v_plane_offset)
		new_byte_offset -= v_plane_offset;
	else if (byte_offset >= u_plane_offset)
		new_byte_offset -= u_plane_offset;

	float2 sample_pos[4];

	float u_val = floor(fmod(new_byte_offset, width)) * width_i;
	float v_val = floor(new_byte_offset * width_i)    * height_i;

	 
	u_val += width_i  * 0.5;
	v_val += height_i * 0.5;

	sample_pos[0] = float2(u_val,            v_val);
	sample_pos[1] = float2(u_val += width_i, v_val);
	sample_pos[2] = float2(u_val += width_i, v_val);
	sample_pos[3] = float2(u_val +  width_i, v_val);

	float4x4 out_val = float4x4(
		image.Sample(def_sampler, sample_pos[0]),
		image.Sample(def_sampler, sample_pos[1]),
		image.Sample(def_sampler, sample_pos[2]),
		image.Sample(def_sampler, sample_pos[3])
	);

	out_val = transpose(out_val);

	if (byte_offset < u_plane_offset)
		return out_val[1];
	else if (byte_offset < v_plane_offset)
		return out_val[0];
	else
		return out_val[2];
}

float4 main(VertInOut vert_in) : SV_Target
{
	return PSPlanar444(vert_in);
}
